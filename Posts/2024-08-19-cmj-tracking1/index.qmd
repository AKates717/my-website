---
title: "Jump Analysis in R - Part 1: Visualizing Individual Performance"
description: "In part one of this series, we will create a simple visualization to track the countermovement jump performance of one athlete"
author:
  - name: Andrew Kates
    url: https://github.com/AKates717
date: 08-19-2024
categories: ["S&C","R", "ggplot2"]
image: CMJ.ppm
draft: false
execute: 
  echo: true
code-fold: show
editor_options: 
  chunk_output_type: console
---

If you are a strength and conditioning (S&C) coach or sport scientist, there's a good chance you collect countermovement jump (CMJ) data with your athletes, and an equally good chance you use Microsoft Excel to work with your data. In fact, S&C coaches have been plotting CMJ results in Microsoft Excel since the mid 1500s.

More recently, however, the sport science community has embraced more advanced tools for data analysis, with R being a popular choice.

## Who is this post for?

Maybe you collect data from force plates but you don't have a system for analyzing that data. Maybe you don't have force plates, but you're able to collect jumps from a jump mat, or an application like MyJump. Or maybe you have access to a consumer grade system, like Vald Force Decks or Hawkin Dynamics, but you want to build custom reports outside of those systems. If any of these describe you, I hope you will be able to learn from this post.

## Getting Set Up

This post does assume that you have R and R Studio installed on your computer, and that you are at least a little bit familiar with coding in R Studio.

We will start by installing and loading all necessary packages. I will also source some pre-built functions, which are outside the scope of this post, but which you can find in the github repository for this site.

```{r}
#| echo: true
#| output: false

library(tidyverse)
library(readxl)
library(janitor)
#library(bslib)
#library(ggthemes)
#library(lubridate)
#library(thematic)
#library(plotly)
#library(patchwork)
#library(scales)
#library(gt)
#library(gtExtras)
#library(withr)
#library(ggpp)
#library(ggimage)

#shouldn't need this
source("~/Dropbox/Data Science/Website/plot_functions.R")


```

## Data Import and Preparation

For the purposes of this post, I've created a table containing five days worth of CMJ results for a fictional athlete. The table is very simple and contains only three columns; date, jump number, and jump height.

for this post, need to make sure that whatever table I show the reader, that I'm creating the ggplot from that table (not from my own version with athlete names). Might be best to include a csv in the repo and just import from there.

```{r}
#| output: false

recent_five <- read_csv("recent_five.csv")
```

```{r}
#| label: tbl1
recent_five
```

As you can see, our fictional athlete has performed 3 jumps on each of 5 different days between June 14, 2024 and August 14, 2024. Now that we have a very simple data set to work with, let's define what we would like our plot to display.

## What am I trying to accomplish with this plot?

Traditionally, as an S&C coach, we are likely interested in either the daily average or daily maximum, but because I'm greedy I am going to try to include as much information in this plot as possible.

I want my plot to clearly show:

1.  Average Daily Jump Height

2.  Best Daily Jump

3.  Each jump performed

4.  Average performance across all 5 dates

Now, that's a lot of information for one plot, so let's go one step at a time, and see if we can communicate all of this information in a visually pleasing, non-overwhelming manner.

## Creating the Plot

#### 1. Average Daily Jump Height

We will start by taking our `recent_five` data-frame, and creating a `ggplot` with the date on the x-axis. We will also use a function called `stat_summary` to create a mean score for each date.

```{r}
#| label: fig-cmj1
#| fig-cap: Countermovement jump heights from the last five testing dates
#| echo: true

recent_five %>%
  ggplot(aes(x = factor(Date, ordered = T))) +
  stat_summary(aes(y = flight_height_tov, group = Date), fun = "mean", geom = "point")

```

So now we've created the basic plot, and we've also added our first "layer"; mean jump height for each date.

Before we continue adding layers to the plot, however, I'm going to clean it up a bit with some custom themes.

```{r}
#| label: fig-themes
#Create a custom theme for my plots and save it as ak_plot_theme

#copy/paste ak_plot_theme
```

Below, you can see that I've added my theme as an additional layer to the plot. I've also changed the size of the "mean" data points, and I've customized the labels using `labs()`.

```{r}
#| label: fig-cmj-themed
#| fig-cap: Countermovement jump heights from the last five testing dates
#| echo: true

recent_five %>%
  ggplot(aes(x = factor(Date, ordered = T))) +
  stat_summary(aes(y = flight_height_tov, group = Date), fun = "mean", geom = "point", size = 6) +
  ak_plot_theme() +
  labs(
    x = NULL,
    y = "Jump Height (cm)",
    title = NULL)
```

#### 2. Best Daily Jump Height

Now we've got our basic plot, with a bit of formatting to make it look good, let's add a point to show the best (highest) jump our athlete performed each day.

```{r}
#| label: fig-cmj2
#| fig-cap: Countermovement jump heights from the last five testing dates
#| cap-location: margin
#| echo: true

recent_five %>%
  ggplot(aes(x = factor(Date, ordered = T))) +
  stat_summary(aes(y = flight_height_tov, group = Date), fun = "mean", geom = "point", size = 6) +
  stat_summary(aes(y = flight_height_tov, group = Date), fun = "max", geom = "point", size = 4) +
    ak_plot_theme() +
  labs(
    x = NULL,
    y = "Jump Height (cm)",
    title = NULL)
```

Great, we've got both average and maximum on the same plot. I'm just going to make some aesthetic improvements by

1.  Creating a custom function to draw a vertical line connecting the mean and max dots, then adding a layer using that function (@fig-cmj3-1 )

2.  Connecting the daily Mean scores with a line so we can see changes between daily scores a bit better (@fig-cmj3-2 ).

```{r}
#| label: fig-cmj3
#| fig-cap: Countermovement jump heights from the last five testing dates
#| fig-subcap: 
#|  - "Vertical lines to join Mean and Max for each day"
#|  - "Trend line for the Mean daily jump height"
#| layout-ncol: 2
#| column: page

recent_five %>%
  ggplot(aes(x = factor(Date, ordered = T))) +
  stat_summary(aes(y = flight_height_tov, group = Date), fun = "mean", geom = "point", size = 4) +
  stat_summary(aes(y = flight_height_tov, group = Date), fun = "max", geom = "point", size = 2) +
  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom="pointrange", size = 2) +
  ak_plot_theme() +
  labs(
    x = NULL,
    y = "Jump Height (cm)",
    title = NULL)

recent_five %>%
  ggplot(aes(x = factor(Date, ordered = T))) +
  stat_summary(aes(y = flight_height_tov, group = Date), fun = "mean", geom = "point", size = 4) +
  stat_summary(aes(y = flight_height_tov, group = Date), fun = "max", geom = "point", size = 2) +
  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom="pointrange", size = 2) +
  stat_summary(aes(y = flight_height_tov, group = 5), fun = "mean", geom = "line", linewidth = 1) +
  ak_plot_theme() +
  labs(
    x = NULL,
    y = "Jump Height (cm)",
    title = NULL)
```

#### 3. Each Jump Performed

Let's add a small dot so we can see the height of each jump.

```{r}
#| label: fig-cmj4
#| fig-cap: Countermovement jump heights from the last five testing dates

recent_five %>%
  ggplot(aes(x = factor(Date, ordered = T))) +
  stat_summary(aes(y = flight_height_tov, group = Date), fun = "mean", geom = "point", size = 4) +
  stat_summary(aes(y = flight_height_tov, group = Date), fun = "max", geom = "point", size = 2) +
  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom="pointrange", size = 2) +
  stat_summary(aes(y = flight_height_tov, group = 5), fun = "mean", geom = "line", linewidth = 1) +
  geom_jitter(aes(y = flight_height_tov), shape = 1, size = 2, alpha = 0.5, width = 0.2) +
  #geom_hline(aes(yintercept = mean(as.numeric(flight_height_tov))), alpha = 0.3, linetype = 2, linewidth = 1.5) +
  ak_plot_theme() +
  labs(
    x = NULL,
    y = "Jump Height (cm)",
    title = NULL)
  
  
```

#### 4. Average performance across all five dates

In Figure 5a, I've added a line representing the average jump height from our data set, which allows us to compare. 5b Average + SD? Look up some Hawkin values here. 5c A regression line to give a general idea of how the athlete's jump height is trending. I will discuss some options for analyzing these plots in a future blog post.

Future blog posts

-   Turning our ggplot2 plots into plotly plots

-   adding data analysis to our plots to measure changes in jump performance

::: {layout="[ 40, 60 ]"}
::: {#first-column}
```{r}
#| label: fig-cmj5
#| fig-cap: Countermovement jump heights from the last five testing dates
#| echo: true
#| eval: false
#| code-overflow: wrap

recent_five %>%
  ggplot(aes(x = factor(Date, ordered = T))) +
  stat_summary(aes(y = flight_height_tov, group = Date), fun = "mean", geom = "point", size = 4) +
  stat_summary(aes(y = flight_height_tov, group = Date), fun = "max", geom = "point", size = 2) +
  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom="pointrange", size = 2) +
  stat_summary(aes(y = flight_height_tov, group = 5), fun = "mean", geom = "line", linewidth = 1) +
  geom_jitter(aes(y = flight_height_tov), shape = 1, size = 2, alpha = 0.5, width = 0.2) +
  #geom_hline(aes(yintercept = mean(as.numeric(flight_height_tov))), alpha = 0.3, linetype = 2, linewidth = 1.5) +
  ak_plot_theme() +
  labs(
    x = NULL,
    y = "Jump Height (cm)",
    title = NULL)


```

Some text that should be laid out below the code
:::

::: {#second-column}
```{r}
#| label: fig-cmj6
#| fig-cap: Countermovement jump heights from the last five testing dates
#| echo: false


recent_five %>%
  ggplot(aes(x = factor(Date, ordered = T))) +
  stat_summary(aes(y = flight_height_tov, group = Date), fun = "mean", geom = "point", size = 4) +
  stat_summary(aes(y = flight_height_tov, group = Date), fun = "max", geom = "point", size = 2) +
  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom="pointrange", size = 2) +
  stat_summary(aes(y = flight_height_tov, group = 5), fun = "mean", geom = "line", linewidth = 1) +
  geom_jitter(aes(y = flight_height_tov), shape = 1, size = 2, alpha = 0.5, width = 0.2) +
  #geom_hline(aes(yintercept = mean(as.numeric(flight_height_tov))), alpha = 0.3, linetype = 2, linewidth = 1.5) +
  ak_plot_theme() +
  labs(
    x = NULL,
    y = "Jump Height (cm)",
    title = NULL)
```
:::
:::

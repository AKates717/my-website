{
  "hash": "3dc5cb0005b0431037aa6885701b8045",
  "result": {
    "markdown": "---\ntitle: \"Countermovement Jump Analysis in R - Visualizing Individual Performance\"\ndescription: \"This post will walk through an example of creating a custom plot to track countermovement jump performance using force plates \"\nauthor:\n  - name: Andrew Kates\n    url: https://github.com/AKates717\n    affiliation: University of Victoria\n    affiliation-url: https://uvic.ca \ndate: 08-19-2024\ncategories: [\"S&C\",\"R\"]\nimage: CMJ.ppm\ndraft: false\nexecute: \n  echo: false\ncode-fold: true\neditor_options: \n  chunk_output_type: console\n---\n\n\nIf you are a strength and conditioning (S&C) coach or sport scientist, there's a good chance you collect countermovement jump (CMJ) data from your athletes, and an equally good chance you use Microsoft Excel to work with your data. In fact, S&C coaches have been plotting CMJ results in Microsoft Excel since the mid 1500s.\n\nMore recently, however, the sport science community has embraced more advanced tools for data analysis, with R being a popular choice.\n\n### Who is this post for?\n\nMaybe you collect data from force plates but you don't have a system for analyzing that data. Maybe you don't have force plates, but you're able to collect jumps from a jump mat, or an application like MyJump. Or maybe you have access to a consumer grade system, like Vald Force Decks or Hawkin Dynamics, but you want to build custom reports outside of those systems. If any of these describe you, I hope you will be able to learn from this post.\n\n### Getting Set Up\n\nThis post does assume that you have R and R Studio installed on your computer, and that you are at least a little bit familiar with coding in R Studio.\n\nWe will start by installing and loading all necessary packages. I will also source some pre-built functions, which are outside the scope of this post, but which you can find in the github repository for this site.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(janitor)\nlibrary(bslib)\nlibrary(ggthemes)\nlibrary(lubridate)\nlibrary(thematic)\nlibrary(plotly)\nlibrary(patchwork)\nlibrary(scales)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(withr)\nlibrary(ggpp)\nlibrary(ggimage)\nlibrary(googlesheets4)\n\nsource(\"~/Dropbox/Data Science/Website/plot_functions.R\")\n```\n:::\n\n\n### Data Import and Preparation\n\nFor the purposes of this post, I've created a Google sheet which I've used to store a simplified output of CMJ results for a fictional athlete. We will begin by importing that data into R Studio using the `range_speedread` function from the `googlesheets4` package, and creating a data-frame called `jumps`.\n\n\n::: {.cell fig.showtext='true'}\n\n```{.r .cell-code}\njumps <- range_speedread(\"https://docs.google.com/spreadsheets/d/1OYu-AaAK8w36-_JcUsoSuX-BnRnyYozjmn8KQbz-axw/edit?gid=2135526598#gid=2135526598\", sheet = \"Database\") %>%\n  clean_names() %>%\n  mutate(date_ddmmyear = as.Date(date_ddmmyear),\n         date_ddmmyear2 =  (format(date_ddmmyear, \"%b %d, %Y\"))) %>%\n  mutate_at(c(5:69), as.numeric)\n\nrecent_five <- jumps %>%\n  filter(athlete == \"Cassie Sharpe\", activity == \"CMJ\") %>%\n  arrange(desc(date_ddmmyear)) %>%\n  filter(date_ddmmyear %in% unique(date_ddmmyear)[1:5])\n```\n:::\n\n\nAnd here is\n\n\n::: {.cell fig.showtext='true'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 Ã— 3\n   Jump   Date       `Jump Height (cm)`\n   <chr>  <date>                  <dbl>\n 1 Jump 1 2024-07-22               28.9\n 2 Jump 2 2024-07-22               29.2\n 3 Jump 3 2024-07-22               28.8\n 4 Jump 1 2024-07-18               29.1\n 5 Jump 2 2024-07-18               27.4\n 6 Jump 3 2024-07-18               27.3\n 7 Jump 1 2024-06-14               27.7\n 8 Jump 2 2024-06-14               28.2\n 9 Jump 3 2024-06-14               27.7\n10 Jump 1 2024-06-12               29.2\n11 Jump 2 2024-06-12               27.3\n12 Jump 3 2024-06-12               27.8\n13 Jump 4 2024-06-12               26.9\n14 Jump 5 2024-06-12               27.1\n15 Jump 1 2024-06-05               29.3\n16 Jump 2 2024-06-05               28.3\n17 Jump 3 2024-06-05               27.8\n```\n:::\n:::\n\n\n### What am I trying to accomplish with this plot?\n\nYou will notice that our fictional athlete has performed 3-5 jumps on any given day. You might be interested in only the daily average or daily maximum, but because I'm greedy I am going to try to include as much information in this plot as possible.\n\nSo I want my plot to clearly show:\n\n1.  Average Daily Jump Height\n\n2.  Best Daily Jump\n\n3.  Each jump performed\n\n4.  Average performance across all 5 dates\n\nNow, that's a lot of information for one plot, so let's go one step at a time, and see if we can communciate all of this information in a visually pleasing, non-overwhelming manner.\n\n### Creating the Plot\n\n#### 1. Average Daily Jump Height\n\nWe will start by taking our `recent_five` data-frame, and creating a `ggplot` with the date on the x-axis. We will also use a function called `stat_summary` to create a mean score for each date.\n\n\n::: {.cell fig.showtext='true'}\n\n```{.r .cell-code}\nrecent_five %>%\n  ggplot(aes(x = factor(date_ddmmyear, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = date_ddmmyear), fun = \"mean\", geom = \"point\", size = 4)\n```\n\n::: {.cell-output-display}\n![Countermovement jump heights from the last five testing dates](index_files/figure-html/fig-cmj1-1.png){#fig-cmj1 width=672}\n:::\n:::\n\n\nSo now we've created the basic plot, and we've also added our first layer, the mean jump height for each date. Let's keep going.\n\n#### 1b. Quick Intermission for Formatting\n\nBefore we continue adding layers to the plot, I'm going to clean it up a bit by changing the theme, the axis labels, etc.\n\n\n::: {.cell fig.showtext='true'}\n\n```{.r .cell-code}\nrecent_five %>%\n  ggplot(aes(x = factor(date_ddmmyear, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = date_ddmmyear), fun = \"mean\", geom = \"point\", size = 4) +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n```\n\n::: {.cell-output-display}\n![Countermovement jump heights from the last five testing dates](index_files/figure-html/fig-cmj1b-1.png){#fig-cmj1b width=672}\n:::\n:::\n\n\n#### 2. Best Daily Jump Height\n\nNow we've got our basic plot, with a bit of formatting to make it look good, let's add a point to show the best (highest) jump our athlete performed each day.\n\n\n::: {.cell fig.showtext='true'}\n\n```{.r .cell-code}\nrecent_five %>%\n  ggplot(aes(x = factor(date_ddmmyear, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = date_ddmmyear), fun = \"mean\", geom = \"point\", size = 4) +\n  stat_summary(aes(y = flight_height_tov, group = date_ddmmyear), fun = \"max\", geom = \"point\", size = 2) +\n    ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n```\n\n::: {.cell-output-display}\n![Countermovement jump heights from the last five testing dates](index_files/figure-html/fig-cmj2-1.png){#fig-cmj2 width=672}\n:::\n:::\n\n\nGreat, we've got both average and maximum on the same plot. I'm just going to make some aesthetic improvements by a) Connecting Mean and Max with a vertical line using a custom stat_summary function (@fig-cmj3-1 ); and b) connecting the daily Mean scores with a line so we can see changes between daily scores a bit better (@fig-cmj3-2 ).\n\n\n::: {#fig-cmj3 .cell .column-page layout-ncol=\"2\" fig.showtext='true'}\n\n```{.r .cell-code}\nrecent_five %>%\n  ggplot(aes(x = factor(date_ddmmyear, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = date_ddmmyear), fun = \"mean\", geom = \"point\", size = 4) +\n  stat_summary(aes(y = flight_height_tov, group = date_ddmmyear), fun = \"max\", geom = \"point\", size = 2) +\n  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom=\"pointrange\", size = 2) +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n\nrecent_five %>%\n  ggplot(aes(x = factor(date_ddmmyear, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = date_ddmmyear), fun = \"mean\", geom = \"point\", size = 4) +\n  stat_summary(aes(y = flight_height_tov, group = date_ddmmyear), fun = \"max\", geom = \"point\", size = 2) +\n  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom=\"pointrange\", size = 2) +\n  stat_summary(aes(y = flight_height_tov, group = 5), fun = \"mean\", geom = \"line\", linewidth = 1) +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n```\n\n::: {.cell-output-display}\n![Vertical lines to join Mean and Max for each day](index_files/figure-html/fig-cmj3-1.png){#fig-cmj3-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Trend line for the Mean daily jump height](index_files/figure-html/fig-cmj3-2.png){#fig-cmj3-2 width=672}\n:::\n\nCountermovement jump heights from the last five testing dates\n:::\n\n\n#### 3. Each Jump Performed\n\nLet's add a small dot so we can see the height of each jump.\n\n\n::: {.cell fig.showtext='true'}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n50\n\n`5*10`\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
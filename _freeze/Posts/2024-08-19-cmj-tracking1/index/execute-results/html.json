{
  "hash": "8d12b7ecc3565de5d3f34ba0ad19a5aa",
  "result": {
    "markdown": "---\ntitle: \"Jump Analysis in R - Part 1: Visualizing Individual Performance\"\ndescription: \"In part one of this series, we will create a simple visualization to track the countermovement jump performance of one athlete\"\nauthor:\n  - name: Andrew Kates\n    url: https://github.com/AKates717\ndate: 08-19-2024\ncategories: [\"S&C\",\"R\", \"ggplot2\"]\nimage: CMJ.ppm\n# format: \n#   html: \n#     fig-width: 4\n#     fig-height: 3\ndraft: false\nexecute: \n  echo: true\ncode-fold: show\ncode-tools: true\neditor_options: \n  chunk_output_type: console\nreference-location: margin\n---\n\n\nAs an S&C coach, you are probably aware of the story of [Milo of Croton](https://en.wikipedia.org/wiki/Milo_of_Croton). Milo was a Greek athlete in the late 6th century BC who would begin an Olympic training cycle by carrying a newborn calf on his back everyday. Over time the calf would grow bigger and bigger, and Milo would grow stronger and stronger. Eventually he would be carrying a four year old cow on his back and he'd be in peak shape for the Olympics.[^1] What you probably didn't know, is that Milo's strength and conditioning coach was actually plotting his progress in Microsoft Excel. Of course, this was almost 3000 years ago, and just as training methods have progressed, so have our tools for analyzing data. This is why I've created this step-by-step guide to take you from an excel spreadsheet containing jump heights (or cow mass measurements) to a beautiful plot built using R, that will take your reports to the next level.\n\n[^1]: Also: \"He carried the full-grown cow the length of the stadium, then proceeded to kill, roast, and eat it.\" You can't make this stuff up.\n\n## Who is this post for?\n\nThis post is for anyone who works in sport or fitness, collects jump data with their athletes/clients, and is at least somewhat familiar with using R and R Studio. A basic understanding of the [ggplot2](https://ggplot2.tidyverse.org/) package will also be helpful.\n\nMaybe you collect data from force plates but you don't have a system for analyzing that data. Maybe you use a consumer grade system, like Vald Force Decks or Hawkin Dynamics, but you want to build custom reports outside of those systems. Or maybe you don't have force plates, but you collect jumps from a jump mat, or an application like MyJump. If any of these describe you, I hope you will find this post useful.\n\n## What am I trying to accomplish with this plot?\n\nTraditionally, as an S&C coach, we are likely interested in either the daily average or daily maximum, but because I'm greedy I am going to try to include as much information in this plot as possible.\n\nI want my plot to clearly show:\n\n1.  Average Daily Jump Height\n\n2.  Best Daily Jump\n\n3.  Each jump performed\n\n4.  Average performance across all 5 dates\n\nNow, that's a lot of information for one plot, so let's go one step at a time, and see if we can communicate all of this information in an aesthetically pleasing, non-cluttered plot.\n\n## Getting Set Up\n\nWe will start by installing and loading all necessary packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(janitor)\n```\n:::\n\n\nFor the purposes of this post, I've created a simple spreadsheet containing five days worth of CMJ results for a fictional athlete. You can access the file [here](https://github.com/AKates717/my-website/blob/master/Posts/2024-08-19-cmj-tracking1/recent_five.csv), or you can create your own in excel and read it into R Studio, as seen below. The data will be loaded into the R Studio Environment as a data-frame titled `recent_five`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_five <- read_csv(\"recent_five.csv\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 Ã— 3\n   Date       Jump   flight_height_tov\n   <date>     <chr>              <dbl>\n 1 2024-08-14 Jump 1              28.1\n 2 2024-08-14 Jump 2              30.1\n 3 2024-08-14 Jump 3              29.3\n 4 2024-08-09 Jump 1              30.4\n 5 2024-08-09 Jump 2              29.0\n 6 2024-08-09 Jump 3              28.5\n 7 2024-07-22 Jump 1              28.9\n 8 2024-07-22 Jump 2              29.2\n 9 2024-07-22 Jump 3              28.8\n10 2024-07-18 Jump 1              29.1\n11 2024-07-18 Jump 2              27.4\n12 2024-07-18 Jump 3              27.3\n13 2024-06-14 Jump 1              27.7\n14 2024-06-14 Jump 2              28.2\n15 2024-06-14 Jump 3              27.7\n```\n:::\n:::\n\n\n## Creating the Plot\n\n### 1. Average Daily Jump Height\n\nWe will start by taking our `recent_five` data-frame, and creating a plot using the `ggplot` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = TRUE))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 6)\n```\n\n::: {.cell-output-display}\n![Countermovement jump heights from the last five testing dates](index_files/figure-html/fig-cmj1-1.png){#fig-cmj1 width=672}\n:::\n:::\n\n\nAs you can see, we've created the basic plot, and we've also added our first layer of data; mean jump height for each date. There's a couple things that bear mentioning here:\n\n1.  I have turned the date into a factor, as I prefer to visualize the jumps as being \"equally spaced\", so to speak. It can also be useful to plot the dates chronologically, so you can get an idea of how much time has passed between testing sessions, but this can easily ruin the appearance of the plot, especially if you have long, inconsistent gaps between jump assessments.\n2.  Using stat_summary allows me to do calculations within the layer of the plot, and saves me from creating more data-frames. The practicality of this should hopefully become increasingly apparent as we add more layers to the plot. In this case, I have asked stat_summary to take the jump height values, group them by date, create mean scores, and display them as size 6 points.\n\nWe now have a basic plot for our primary outcome measure, mean jump height, and our next step is to add maximum jump height. But before we continue adding layers to the plot, I'm going to clean it up a bit with some custom themes.\n\n#### Brief Intermission:  Adding a Theme\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Create a custom theme for my plots and save it as ak_plot_theme\n\nak_plot_theme <- function(..., base_size = 12) {\n  theme(\n    text = element_text(size = base_size),\n    axis.ticks = element_blank(),\n    axis.title = element_text(color = \"black\",\n                              face = \"bold\"),\n    axis.text = element_text(color = \"black\",\n                             face = \"bold\"),\n    axis.text.x = element_text(angle = 40, hjust =0.6, vjust = 0.8),\n    plot.title.position = \"plot\",\n    plot.title = element_text(size = 16,\n                              color = \"black\",\n                              vjust = 5),\n    plot.subtitle = element_text(color = \"black\",\n                                 hjust = 0.5),\n    plot.caption = element_text(size = 8,\n                                face = \"italic\",\n                                color = \"black\"),\n    panel.grid.minor = element_blank(),\n    panel.grid.major =  element_line(color = \"#e0e0e0\"),\n    panel.grid.major.x = element_blank(),\n    panel.background = element_rect(fill = \"#ffffff\"),\n    plot.background = element_blank(),\n    panel.border = element_blank())\n}\n```\n:::\n\n\nAll the nuances of this theme are beyond the scope of this post, but here's what you need to know. `theme()` is a function from the `ggplot2` package that allows us to customize the way our plot looks. I have created a function which calls `theme()` and then sets parameters to define different components of the plots appearance. Saving this theme as a function allows me to add it to any plot as a layer, as seen below. This lets me keep a consistent style whenever I'm creating plots, and saves a lot of typing.\n\nAdditionally, you can see I've customized the x, y, and title labels using `labs()`. Oh yeah, and I'm going to colour the data points gold using `colour = \"D19A2B\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 6, colour = \"#D19A2B\") +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n```\n\n::: {.cell-output-display}\n![Okay, that's better.](index_files/figure-html/fig-cmj-themed-1.png){#fig-cmj-themed width=672}\n:::\n:::\n\n\n### 2. Best Daily Jump Height\n\nNow let's add a point to show the best (highest) jump our athlete performed each day.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 6, colour = \"#D19A2B\") +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"max\", geom = \"point\", size = 4, colour = \"#D19A2B\") +\n    ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n```\n\n::: {.cell-output-display}\n![Countermovement jump heights from the last five testing dates](index_files/figure-html/fig-cmj2-1.png){#fig-cmj2 width=672}\n:::\n:::\n\n\nHere I've used stat_summary again, but I've switched the function from mean to max, and I've decreased the size of the points from 6 to 4, indicating that mean jump height is our primary outcome measure, and maximum jump height is a secondary outcome measure.\n\nAgain, before moving on, I'm going to make two more aesthetic improvements:\n\n1.  I've created a custom function to draw a vertical line connecting the mean and max dots. `Stat_summary` offers an argument called `fun.data` which allows you to compute multiple values at once. In this case, I've created a function that defines the mean and max values, and asked stat_summary to display a line connecting those two values[^2]. (@fig-cmj3-1 )\n\n2.  We will connect the daily mean scores with a line so we can see changes between daily scores a bit better (@fig-cmj3-2 ).\n\n[^2]: Honestly, I'm not 100% sure how fun.data communicates with my mean_peak function, but it works, so I'm not asking any questions\n\n\n::: {#fig-cmj3 .cell .column-page layout-ncol=\"2\"}\n\n```{.r .cell-code}\n#draw a line between the mean and the max jump height\nmean_peak <- function(x) {\n  data.frame(y = (mean(x) + 0.0001),\n             ymax = max(x),\n             ymin = mean(x))\n}\n\n#Figure 4a: adding vertical lines\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 6, colour = \"#D19A2B\") +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"max\", geom = \"point\", size = 4, colour = \"#D19A2B\") +\n  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom=\"pointrange\", size = 2, colour = \"#D19A2B\") +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n\n#Figure 4b: adding line to connect mean jump heights\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 6, colour = \"#D19A2B\") +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"max\", geom = \"point\", size = 4, colour = \"#D19A2B\") +\n  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom=\"pointrange\", size = 2, colour = \"#D19A2B\") +\n  stat_summary(aes(y = flight_height_tov, group = 5), fun = \"mean\", geom = \"line\", linewidth = 1, colour = \"#D19A2B\") +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n```\n\n::: {.cell-output-display}\n![Vertical lines to join Mean and Max for each day](index_files/figure-html/fig-cmj3-1.png){#fig-cmj3-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Trend line for the Mean daily jump height](index_files/figure-html/fig-cmj3-2.png){#fig-cmj3-2 width=672}\n:::\n\nCountermovement jump heights from the last five testing dates\n:::\n\n\n### 3. Each Jump Performed\n\nAt this point, we've managed to display two different descriptive statistics in one nice clean plot. But like I said, we're being greedy here and we'd also like to see the height of every single jump. We'll add this data using a `geom_jitter` layer, which is basically just a `geom_point` that let's us spread the points out, making them a bit easier to see.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 6, colour = \"#D19A2B\") +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"max\", geom = \"point\", size = 4, colour = \"#D19A2B\") +\n  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom=\"pointrange\", size = 2, colour = \"#D19A2B\") +\n  stat_summary(aes(y = flight_height_tov, group = 5), fun = \"mean\", geom = \"line\", linewidth = 1, colour = \"#D19A2B\") +\n  geom_jitter(aes(y = flight_height_tov), shape = 1, size = 4, alpha = 0.5, width = 0.2) +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n```\n\n::: {.cell-output-display}\n![Countermovement jump heights from the last five testing dates](index_files/figure-html/fig-cmj4-1.png){#fig-cmj4 width=672}\n:::\n:::\n\n\n### 4. Average performance across all five dates\n\nLastly, it would be helpful to know how each score compares to the overall mean for this athlete, so we'll add a horizontal line with the y-intercept set to the overall mean jump height.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 6, colour = \"#D19A2B\") +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"max\", geom = \"point\", size = 4, colour = \"#D19A2B\") +\n  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom=\"pointrange\", size = 2, colour = \"#D19A2B\") +\n  stat_summary(aes(y = flight_height_tov, group = 5), fun = \"mean\", geom = \"line\", linewidth = 1, colour = \"#D19A2B\") +\n  geom_jitter(aes(y = flight_height_tov), shape = 1, size = 4, alpha = 0.5, width = 0.2) +\n  geom_hline(aes(yintercept = mean(flight_height_tov)), alpha = 0.3, linetype = 2, linewidth = 3) +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n```\n\n::: {.cell-output-display}\n![Countermovement jump heights from the last five testing dates](index_files/figure-html/fig-cmj6-1.png){#fig-cmj6 width=672}\n:::\n:::\n\n\n## Next Steps\n\nIn this blog post I have given step-by-step instructions on how to create a unique plot to visualize CMJ data. Although I am happy with the style of the plot, and the amount of information I have been able to include, there is one major flaw with the final product. Although we can see roughly where all of our data lines up with the y-axis, we have not communicated any actual values to our audience.\n\nPicture it, you share your beautiful plot with a coach or athlete and their first question is: \"How high did I jump?\". If all you have is this plot, what are you going to tell them? In the next blog post in this series, I will show you how to use `Plotly` to make our plot interactive, and to convey this vital information to our audience without ruining our minimalist aesthetic.\n\nThanks for reading!\n\nFuture blog posts\n\n-   Part 2: Creating an interactive plot: upgrading our `ggplot2` to `Plotly`\n\n-   Part 3: Adding data analysis to our plots to measure changes in jump performance\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
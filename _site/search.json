[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Andrew Kates",
    "section": "",
    "text": "My name is Andrew Kates. I work as a Sport Scientist at the Canadian Sport Institute Pacific in Whistler, British Columbia, Canada. I am also a PhD student in Biomechanics at the University of Victoria. On this website you will find my blog, in which I will write primarily about Strength and Conditioning and practical Data Science for sport."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Andrew Kates",
    "section": "",
    "text": "10 Years Coaching in High Performance Sport\nACL Rehabilitation\nNeuromuscular Testing\nPractical Data Science for Sport\n\n\nPhD Student (Current) | University of Victoria\nM.Sc. Kinesiology (2014) | University of Victoria\nB.Sc. Kinesiology (2011) | Dalhousie University\n\n\n\nI have been working primarily as a Strength and Conditioning Coach with elite winter sport athletes since 2015. Over the past 10 years I have been fortunate to coach multiple Olympic medalists while travelling all over the world, including the 2022 Olympic Winter Games in Beijing."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "R\n\n\n\n\nUsing this post to test out different features of Quarto as I work through the documentation\n\n\n\n\n\n\nAug 19, 2024\n\n\nAndrew Kates\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nS&C\n\n\nR\n\n\nggplot2\n\n\n\n\nIn part one of this series, we will create a simple visualization to track the countermovement jump performance of one athlete\n\n\n\n\n\n\nAug 19, 2024\n\n\nAndrew Kates\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Posts/2024-08-19-cmj-tracking1/index.html",
    "href": "Posts/2024-08-19-cmj-tracking1/index.html",
    "title": "Jump Analysis in R - Part 1: Visualizing Individual Performance",
    "section": "",
    "text": "If you are a strength and conditioning (S&C) coach or sport scientist, there’s a good chance you collect countermovement jump (CMJ) data with your athletes, and an equally good chance you use Microsoft Excel to work with your data. In fact, S&C coaches have been plotting CMJ results in Microsoft Excel since the mid 1500s.\nMore recently, however, the sport science community has embraced more advanced tools for data analysis, with R being a popular choice."
  },
  {
    "objectID": "Delete_Later/practice-markdown.html",
    "href": "Delete_Later/practice-markdown.html",
    "title": "Andrew Kates",
    "section": "",
    "text": "Here is my first paragraph\nHere is my second paragraph, where you can read more about [MEDS](https://ucsb-meds.github.io/).\nThis is very important text!"
  },
  {
    "objectID": "Posts/2024-08-19-cmj-tracking1/index.html#who-is-this-post-for",
    "href": "Posts/2024-08-19-cmj-tracking1/index.html#who-is-this-post-for",
    "title": "Jump Analysis in R - Part 1: Visualizing Individual Performance",
    "section": "Who is this post for?",
    "text": "Who is this post for?\nMaybe you collect data from force plates but you don’t have a system for analyzing that data. Maybe you don’t have force plates, but you’re able to collect jumps from a jump mat, or an application like MyJump. Or maybe you have access to a consumer grade system, like Vald Force Decks or Hawkin Dynamics, but you want to build custom reports outside of those systems. If any of these describe you, I hope you will be able to learn from this post."
  },
  {
    "objectID": "Posts/2024-08-19-cmj-tracking1/index.html#getting-set-up",
    "href": "Posts/2024-08-19-cmj-tracking1/index.html#getting-set-up",
    "title": "Jump Analysis in R - Part 1: Visualizing Individual Performance",
    "section": "Getting Set Up",
    "text": "Getting Set Up\nThis post does assume that you have R and R Studio installed on your computer, and that you are at least a little bit familiar with coding in R Studio.\nWe will start by installing and loading all necessary packages. I will also source some pre-built functions, which are outside the scope of this post, but which you can find in the github repository for this site.\n\n\nCode\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(janitor)\n#library(bslib)\n#library(ggthemes)\n#library(lubridate)\n#library(thematic)\n#library(plotly)\n#library(patchwork)\n#library(scales)\n#library(gt)\n#library(gtExtras)\n#library(withr)\n#library(ggpp)\n#library(ggimage)\n\n#shouldn't need this\nsource(\"~/Dropbox/Data Science/Website/plot_functions.R\")"
  },
  {
    "objectID": "Posts/2024-08-19-cmj-tracking1/index.html#data-import-and-preparation",
    "href": "Posts/2024-08-19-cmj-tracking1/index.html#data-import-and-preparation",
    "title": "Jump Analysis in R - Part 1: Visualizing Individual Performance",
    "section": "Data Import and Preparation",
    "text": "Data Import and Preparation\nFor the purposes of this post, I’ve created a table containing five days worth of CMJ results for a fictional athlete. The table is very simple and contains only three columns; date, jump number, and jump height.\nfor this post, need to make sure that whatever table I show the reader, that I’m creating the ggplot from that table (not from my own version with athlete names). Might be best to include a csv in the repo and just import from there.\n\n\nCode\nrecent_five <- read_csv(\"recent_five.csv\")\n\n\n\n\nCode\nrecent_five\n\n\n# A tibble: 15 × 3\n   Date       Jump   flight_height_tov\n   <date>     <chr>              <dbl>\n 1 2024-08-14 Jump 1              28.1\n 2 2024-08-14 Jump 2              30.1\n 3 2024-08-14 Jump 3              29.3\n 4 2024-08-09 Jump 1              30.4\n 5 2024-08-09 Jump 2              29.0\n 6 2024-08-09 Jump 3              28.5\n 7 2024-07-22 Jump 1              28.9\n 8 2024-07-22 Jump 2              29.2\n 9 2024-07-22 Jump 3              28.8\n10 2024-07-18 Jump 1              29.1\n11 2024-07-18 Jump 2              27.4\n12 2024-07-18 Jump 3              27.3\n13 2024-06-14 Jump 1              27.7\n14 2024-06-14 Jump 2              28.2\n15 2024-06-14 Jump 3              27.7\n\n\nAs you can see, our fictional athlete has performed 3 jumps on each of 5 different days between June 14, 2024 and August 14, 2024. Now that we have a very simple data set to work with, let’s define what we would like our plot to display."
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Andrew Kates",
    "section": "Experience",
    "text": "Experience\nI have been working primarily as a Strength and Conditioning Coach with elite winter sport athletes since 2015. Over the past 10 years I have been fortunate to coach multiple Olympic medalists while travelling all over the world, including the 2022 Olympic Winter Games in Beijing."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Andrew Kates",
    "section": "Education",
    "text": "Education\nPhD Student (Current) | University of Victoria\nM.Sc. Kinesiology (2014) | University of Victoria\nB.Sc. Kinesiology (2011) | Dalhousie University"
  },
  {
    "objectID": "Posts/2024-08-19-cmj-tracking1/index.html#what-am-i-trying-to-accomplish-with-this-plot",
    "href": "Posts/2024-08-19-cmj-tracking1/index.html#what-am-i-trying-to-accomplish-with-this-plot",
    "title": "Jump Analysis in R - Part 1: Visualizing Individual Performance",
    "section": "What am I trying to accomplish with this plot?",
    "text": "What am I trying to accomplish with this plot?\nTraditionally, as an S&C coach, we are likely interested in either the daily average or daily maximum, but because I’m greedy I am going to try to include as much information in this plot as possible.\nI want my plot to clearly show:\n\nAverage Daily Jump Height\nBest Daily Jump\nEach jump performed\nAverage performance across all 5 dates\n\nNow, that’s a lot of information for one plot, so let’s go one step at a time, and see if we can communicate all of this information in a visually pleasing, non-overwhelming manner."
  },
  {
    "objectID": "Posts/2024-08-19-cmj-tracking1/index.html#creating-the-plot",
    "href": "Posts/2024-08-19-cmj-tracking1/index.html#creating-the-plot",
    "title": "Jump Analysis in R - Part 1: Visualizing Individual Performance",
    "section": "Creating the Plot",
    "text": "Creating the Plot\n\n1. Average Daily Jump Height\nWe will start by taking our recent_five data-frame, and creating a ggplot with the date on the x-axis. We will also use a function called stat_summary to create a mean score for each date.\n\n\nCode\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\")\n\n\n\n\n\nFigure 1: Countermovement jump heights from the last five testing dates\n\n\n\n\nSo now we’ve created the basic plot, and we’ve also added our first “layer”; mean jump height for each date.\nBefore we continue adding layers to the plot, however, I’m going to clean it up a bit with some custom themes.\n\n\nCode\n#Create a custom theme for my plots and save it as ak_plot_theme\n\n#copy/paste ak_plot_theme\n\n\nBelow, you can see that I’ve added my theme as an additional layer to the plot. I’ve also changed the size of the “mean” data points, and I’ve customized the labels using labs().\n\n\nCode\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 6) +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n\n\n\n\n\nFigure 2: Countermovement jump heights from the last five testing dates\n\n\n\n\n\n\n2. Best Daily Jump Height\nNow we’ve got our basic plot, with a bit of formatting to make it look good, let’s add a point to show the best (highest) jump our athlete performed each day.\n\n\nCode\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 6) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"max\", geom = \"point\", size = 4) +\n    ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n\n\n\n\n\nFigure 3: Countermovement jump heights from the last five testing dates\n\n\n\n\nGreat, we’ve got both average and maximum on the same plot. I’m just going to make some aesthetic improvements by\n\nCreating a custom function to draw a vertical line connecting the mean and max dots, then adding a layer using that function (Figure 4 (a) )\nConnecting the daily Mean scores with a line so we can see changes between daily scores a bit better (Figure 4 (b) ).\n\n\n\nCode\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 4) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"max\", geom = \"point\", size = 2) +\n  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom=\"pointrange\", size = 2) +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 4) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"max\", geom = \"point\", size = 2) +\n  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom=\"pointrange\", size = 2) +\n  stat_summary(aes(y = flight_height_tov, group = 5), fun = \"mean\", geom = \"line\", linewidth = 1) +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n\n\n\n\n\n\n\n\n(a) Vertical lines to join Mean and Max for each day\n\n\n\n\n\n\n\n(b) Trend line for the Mean daily jump height\n\n\n\n\nFigure 4: Countermovement jump heights from the last five testing dates\n\n\n\n\n\n3. Each Jump Performed\nLet’s add a small dot so we can see the height of each jump.\n\n\nCode\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 4) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"max\", geom = \"point\", size = 2) +\n  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom=\"pointrange\", size = 2) +\n  stat_summary(aes(y = flight_height_tov, group = 5), fun = \"mean\", geom = \"line\", linewidth = 1) +\n  geom_jitter(aes(y = flight_height_tov), shape = 1, size = 2, alpha = 0.5, width = 0.2) +\n  #geom_hline(aes(yintercept = mean(as.numeric(flight_height_tov))), alpha = 0.3, linetype = 2, linewidth = 1.5) +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n\n\n\n\n\nFigure 5: Countermovement jump heights from the last five testing dates\n\n\n\n\n\n\n4. Average performance across all five dates\nIn Figure 5a, I’ve added a line representing the average jump height from our data set, which allows us to compare. 5b Average + SD? Look up some Hawkin values here. 5c A regression line to give a general idea of how the athlete’s jump height is trending. I will discuss some options for analyzing these plots in a future blog post.\nFuture blog posts\n\nTurning our ggplot2 plots into plotly plots\nadding data analysis to our plots to measure changes in jump performance\n\n\n\n\n\n\nCode\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 4) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"max\", geom = \"point\", size = 2) +\n  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom=\"pointrange\", size = 2) +\n  stat_summary(aes(y = flight_height_tov, group = 5), fun = \"mean\", geom = \"line\", linewidth = 1) +\n  geom_jitter(aes(y = flight_height_tov), shape = 1, size = 2, alpha = 0.5, width = 0.2) +\n  #geom_hline(aes(yintercept = mean(as.numeric(flight_height_tov))), alpha = 0.3, linetype = 2, linewidth = 1.5) +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n\n\nSome text that should be laid out below the code\n\n\n\n\n\n\n\nFigure 6: Countermovement jump heights from the last five testing dates"
  },
  {
    "objectID": "Posts/2024-08-26-testing-quarto-functions/index.html",
    "href": "Posts/2024-08-26-testing-quarto-functions/index.html",
    "title": "Quarto Features Testing",
    "section": "",
    "text": "Code\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n\n\n\n\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\nThe video shortcode does not work for some reason. But simply copying the embed link from youtube/share does work..\nFor some reason, linking to my note doesn’t work: @nte-example …"
  },
  {
    "objectID": "Posts/2024-08-26-testing-quarto-functions/index.html#code-anotations",
    "href": "Posts/2024-08-26-testing-quarto-functions/index.html#code-anotations",
    "title": "Quarto Features Testing",
    "section": "Code Anotations",
    "text": "Code Anotations\ndon’t work"
  },
  {
    "objectID": "Posts/2024-08-26-testing-quarto-functions/index.html#article-layout",
    "href": "Posts/2024-08-26-testing-quarto-functions/index.html#article-layout",
    "title": "Quarto Features Testing",
    "section": "Article Layout",
    "text": "Article Layout\nAttributes/Classes/.column-body-outset\n\nAttributes/Classes/.column-page\n\nSome output from code (a table) that is as wide as the screen.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n\n\n\n\n\n\n\nCode\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=-123.12, lat=49.28, popup=\"Go Leafs Go\")\n\n\n\n\n\n\n\nMargin Content. maybe needs to be a full paragrpah, wewqefkjjjjjjjjjjjasdnvfkjhekajhfjkefkjhbfdkjbsdkfjhbqefkjhbadkjh bdkjbkjbdsfkjhdbck ajhsbdzckjahdbkjhdb kajhbckhjdbc kjhdbckshdb ckjhdsbkjhzbxcka hjdzbcksadhbcksjhb ckajshdbckjahdbck jhabdkjhadbkjhbkajhd kjhabkhjabkajhbc\n\n\nWe know from the first fundamental theorem of calculus that for \\(x\\) in \\([a, b]\\):\n\\[\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).\\]\nAsides\nHere is the main content\n\nThis goes to the side i guess\n\nmore main content\n\n\n\nCode\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 4) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"max\", geom = \"point\", size = 2) +\n  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom=\"pointrange\", size = 2) +\n  stat_summary(aes(y = flight_height_tov, group = 5), fun = \"mean\", geom = \"line\", linewidth = 1) +\n  geom_jitter(aes(y = flight_height_tov), shape = 1, size = 2, alpha = 0.5, width = 0.2) +\n  #geom_hline(aes(yintercept = mean(as.numeric(flight_height_tov))), alpha = 0.3, linetype = 2, linewidth = 1.5) +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n\n\n\n\n\nCode\nggsave(\"beaches.png\")\n\n\nSaving 7 x 5 in image\n\n\nCode\nbeachplot <- image_read(\"beaches.png\")\nwizgif <- image_read(\"~/Dropbox/Data Science/Website/Posts/2024-08-26-testing-quarto-functions/more-hops.gif\")\n\nframes <- image_composite(beachplot, wizgif, offset = \"+100+100\")\n\nanimation <- image_animate(frames, fps = 10)\nimage_write(animation, \"beachwiz.gif\")\n\n\n\nList\n\nsdasdsd\nasdadas\nmdhfkj\n\nTight List (cmd-alt-9)\n\nsdfjlhdkf\ndsajkfahdsf\nkjasdff"
  },
  {
    "objectID": "Posts/2024-08-26-testing-quarto-functions/index.html#layouts",
    "href": "Posts/2024-08-26-testing-quarto-functions/index.html#layouts",
    "title": "Quarto Features Testing",
    "section": "Layouts",
    "text": "Layouts\nAttributes/Classes/.column-body-outset\n\nAttributes/Classes/.column-page\n\nSome output from code (a table) that is as wide as the screen.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n\n\n\n\n\n\n\nCode\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=-123.12, lat=49.28, popup=\"Go Leafs Go\")\n\n\n\n\n\n\n\nMargin Content. maybe needs to be a full paragrpah, wewqefkjjjjjjjjjjjasdnvfkjhekajhfjkefkjhbfdkjbsdkfjhbqefkjhbadkjh bdkjbkjbdsfkjhdbck ajhsbdzckjahdbkjhdb kajhbckhjdbc kjhdbckshdb ckjhdsbkjhzbxcka hjdzbcksadhbcksjhb ckajshdbckjahdbck jhabdkjhadbkjhbkajhd kjhabkhjabkajhbc\n\n\nWe know from the first fundamental theorem of calculus that for \\(x\\) in \\([a, b]\\):\n\\[\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).\\]\nAsides\nHere is the main content\n\nThis goes to the side i guess\n\nmore main content\n<div class=“tenor-gif-embed” data-postid=“25308866” data-share-method=“host” data-aspect-ratio=“1.33333” data-width=“100%”><a href=“https://tenor.com/view/more-hops-superbad-mclovin-beer-gif-25308866”>More Hops GIF</a>from <a href=“https://tenor.com/search/more-gifs”>More GIFs</a></div> <script type=“text/javascript” async src=“https://tenor.com/embed.js”></script>\n\n\n\nCode\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(magick)\n\n\nLinking to ImageMagick 6.9.12.3\nEnabled features: cairo, fontconfig, freetype, heic, lcms, pango, raw, rsvg, webp\nDisabled features: fftw, ghostscript, x11\n\n\nCode\nlibrary(beepr)\n\nsource(\"~/Dropbox/Data Science/Website/plot_functions.R\")\n\nrecent_five <- read_csv(\"recent_five.csv\")\n\n\nRows: 15 Columns: 3\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Jump\ndbl  (1): flight_height_tov\ndate (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nrecent_five %>%\n  ggplot(aes(x = factor(Date, ordered = T))) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"mean\", geom = \"point\", size = 4) +\n  stat_summary(aes(y = flight_height_tov, group = Date), fun = \"max\", geom = \"point\", size = 2) +\n  stat_summary(aes(y = flight_height_tov), fun.data=mean_peak, geom=\"pointrange\", size = 2) +\n  stat_summary(aes(y = flight_height_tov, group = 5), fun = \"mean\", geom = \"line\", linewidth = 1) +\n  geom_jitter(aes(y = flight_height_tov), shape = 1, size = 2, alpha = 0.5, width = 0.2) +\n  #geom_hline(aes(yintercept = mean(as.numeric(flight_height_tov))), alpha = 0.3, linetype = 2, linewidth = 1.5) +\n  ak_plot_theme() +\n  labs(\n    x = NULL,\n    y = \"Jump Height (cm)\",\n    title = NULL)\n\n\n\n\n\nCode\nggsave(\"beaches.png\")\n\n\nSaving 7 x 5 in image\n\n\nCode\nknitr::include_graphics(\"beaches.png\")\n\n\n\n\n\nCode\nknitr::include_graphics(\"~/Dropbox/Data Science/Website/Posts/2024-08-26-testing-quarto-functions/more-hops.gif\")\n\n\n\n\n\nCode\nbeachplot <- image_read(\"beaches.png\")\nwizgif <- image_read(\"~/Dropbox/Data Science/Website/Posts/2024-08-26-testing-quarto-functions/more-hops.gif\")\n\nframes <- image_composite(beachplot, wizgif, offset = \"+100+100\")\n\nanimation <- image_animate(frames, fps = 10)\nimage_write(animation, \"beachwiz.gif\")\n\nbeep()"
  }
]